global proc setProjectFromFile()
{
    //get current project
    $currentProject = `workspace -q -rd`;
    //get file path
    string $fileName = `file -q -sceneName`;
    string $parts[];
    tokenize $fileName "/" $parts;
    string $rebuild = "";
    int $rebuildSwitch = 0;
    //rebuild path 
    for($item in $parts)
    {
        if($rebuildSwitch == 0 && $item != "scenes")
        {
            $rebuild += ($item+"/");
        }
        else
        {
            $rebuildSwitch = 1;
        }
    }
    //temporarilly set project
    setProject $rebuild;
}

global proc MeshBifrost(int $startFrame, int $endFrame, int $foam, int $mesh)
{
    setProjectFromFile();

    //scene name
    string $fileName = `file -q -sn -shn`;
    string $buffer[];
    tokenize $fileName "." $buffer;
    string $sceneName = $buffer[0];
    string $currentProject = `workspace -q -rd`;

    int $camWidth = `getAttr "defaultResolution.width"`;
    int $camHeight = `getAttr "defaultResolution.height"`;

    //find bifrost base nodes
    string $bifrostContainers[] = `ls -type "bifrostContainer"`;
    select -r $bifrostContainers;

    string $baseNodes[];

    for($item in $bifrostContainers)
    {
        string $connections[];
        string $connectedNodes[] = `listConnections -t "bifrostShape" -plugs false -c false -d on -s off $item`;
        if(`size($connectedNodes)`>0)
        {
            $baseNodes[`size $baseNodes`] = $item;
        }
    }


    //local cache path
    string $cachePath = $currentProject+"cache/bifrost/"+$sceneName;

    //make sure scene has bifrost nodes
    int $size = `size $baseNodes`;
    if ($size > 0)
    {
    	for($i=$startFrame;$i<=$endFrame;$i++)
		{
		    select -r $baseNodes; 
            string $pad = `python ("'%04d' % "+$i)`;
            if($mesh == 1)
            {
                doCreateBifrostCache 5 {"3", $i, $i, "","","bif","0","3","0","none,mesh" } ;
                //check files
                for ($item in $baseNodes)
                {
                    string $meshPath = $currentProject+"cache/bifrost/"+$sceneName+"/"+$item+"/voxel_liquid_mesh/voxel_liquid_mesh_point."+$pad+".bif";
                    if(`filetest -f $meshPath` == 1)
                    {
                        print ("Mesh Saved "+$meshPath);  
                        //playblast  -format image -startTime $i -endTime $i -filename ("playblasts/" + $sceneName + "/" +$sceneName) -sequenceTime 0 -clearCache 1 -viewer 0 -showOrnaments 0 -fp 4 -percent 100 -compression "png" -quality 70 -widthHeight $camWidth $camHeight; 
                    }
                    else
                    {
                        print("Failed to verify file "+$meshPath);
                    }   
                }
            }
            if($foam == 1)
            {
                doCreateBifrostCache 5 {"3", $i, $i, "","","bif","0","3","0","simulation,none" } ;
                //check files
                for ($item in $baseNodes)
                {
                    string $foamPath = $currentProject+"cache/bifrost/"+$sceneName+"/"+$item+"/Foam/Foam_particle."+$pad+".bif";
                    if(`filetest -f $foamPath` == 1)
                    {
                        print ("Foam Saved "+$foamPath);   
                    }
                    else
                    {
                        print("Failed to verify file "+$foamPath);
                    }   
                }
            }
		}
	}
}

//MeshBifrost(1, 75, 1, 1);
